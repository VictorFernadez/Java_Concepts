# Java Servlets

Un servlet es una clase de lenguaje de programación Java que se utiliza para ampliar las capacidades de los servidores que alojan aplicaciones a las que se accede mediante un modelo de programación de solicitud-respuesta.

Aunque los servlets pueden responder a cualquier tipo de solicitud, se utilizan habitualmente para ampliar las aplicaciones alojadas en los servidores web.

Para este tipo de aplicaciones, la tecnología Java Servlet define clases de servlet específicas de HTTP.

Los paquetes javax.servlet y javax.servlet.http proporcionan interfaces y clases para escribir servlets.

Todos los servlets deben implementar la interfaz de servlet, que define los métodos del ciclo de vida.

Al implementar un servicio genérico, puede utilizar o ampliar la clase GenericServlet proporcionada con la API de Servlet de Java.

La clase HttpServlet proporciona métodos, como doGet y doPost, para manejar servicios específicos de HTTP.

## Ciclo de vida de los servlets

El ciclo de vida de un servlet está controlado por el contenedor en el que se ha implementado el servlet. Cuando una solicitud se asigna a un servlet, el contenedor realiza los siguientes pasos.

1. Si no existe una instancia del servlet, el contenedor web:

    a) Carga la clase de servlet.

    b) Crea una instancia de la clase de servlet.

    c) Inicializa la instancia de servlet llamando al método init (la inicialización se trata en Creación e inicialización de un servlet)

2. El contenedor invoca el método de servicio, pasando objetos de solicitud y respuesta. Los métodos de servicio se analizan en Redacción de métodos de servicio.  

> Manejo de eventos del ciclo de vida de servlet

Puede monitorear y reaccionar ante eventos en el ciclo de vida de un servlet definiendo objetos de escucha cuyos métodos se invocan cuando ocurren eventos del ciclo de vida. Para utilizar estos objetos de escucha, debe definir y especificar la clase de escucha

> Definición de la clase de escucha

Usted define una clase de escucha como una implementación de una interfaz de escucha.

Cuando se invoca un método de escucha, se le pasa un evento que contiene información apropiada para el evento. Por ejemplo, a los métodos de la interfaz HttpSessionListener se les pasa un HttpSessionEvent, que contiene un HttpSession.

![Descripción de la imagen](./resources/imgs/listener_class.jpg)

Utilice la anotación @WebListener para definir un oyente para obtener eventos para varias operaciones en el contexto de la aplicación web particular. Las clases anotadas con @WebListener deben implementar una de las siguientes interfaces

```
javax.servlet.ServletContextListener
javax.servlet.ServletContextAttributeListener
javax.servlet.ServletRequestListener
javax.servlet.ServletRequestAttributeListener
javax.servlet..http.HttpSessionListener
javax.servlet..http.HttpSessionAttributeListener
```
Por ejemplo, el siguiente fragmento de código define un oyente que implementa dos de estas interfaces:
```
import javax.servlet.ServletContextAttributeListener;
import javax.servlet.ServletContextListener;
import javax.servlet.annotation.WebListener;

@WebListener()
public class SimpleServletListener implements ServletContextListener,
        ServletContextAttributeListener {
    ...
```

Puede ocurrir cualquier número de excepciones cuando se ejecuta un servlet. Cuando se produce una excepción, el contenedor web genera una página predeterminada que contiene el siguiente mensaje:

```
A Servlet Exception Has Occurred
```

Pero también puede especificar que el contenedor debe devolver una página de error específica para una excepción determinada.

> Compartiendo información

Los componentes web, como la mayoría de los objetos, normalmente trabajan con otros objetos para realizar sus tareas. Los componentes web pueden hacerlo haciendo lo siguiente.

- Usar objetos auxiliares privados (por ejemplo, componentes JavaBeans).
- Compartir objetos que son atributos de ámbito público.
- Utilizando una base de datos.
- Invocar otros recursos web. Los mecanismos de tecnología Java Servlet que permiten que un componente web invoque otros recursos web se describen en Invocación de otros recursos web.

> Usar objetos de alcance

Los componentes web colaboradores comparten información mediante objetos que se mantienen como atributos de cuatro objetos de alcance. Puede acceder a estos atributos utilizando los métodos getAttribute y setAttribute de la clase que representa el alcance.Esto se hace utilizando urlPatterns o el atributo de valor en la anotación.


![Descripción de la imagen](./resources/imgs/scope_objects.jpg)

> Crear e inicializar un servlet

Utilice la anotación @WebServlet para definir un componente de servlet en una aplicación web. Esta anotación se especifica en una clase y contiene metadatos sobre el servlet que se declara.El servlet anotado debe especificar al menos un patrón de URL. Esto se hace utilizando urlPatterns o el atributo de valor en la anotación. Todos los demás atributos son opcionales y tienen configuraciones predeterminadas.Utilice el atributo de valor cuando el único atributo de la anotación sea el patrón de URL; de lo contrario, utilice el atributo urlPatterns cuando también se utilicen otros atributos.

Las clases anotadas con @WebServlet deben extender la clase javax.servlet.http.HttpServlet. Por ejemplo, el siguiente fragmento de código define un servlet con el patrón de URL /report:

```
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;

@WebServlet("/report")
public class MoodServlet extends HttpServlet {
    ...
```
> Writing Service Methods

El servicio proporcionado por un servlet se implementa en el método de servicio de un GenericServlet, en los métodos doMethod (donde Method puede tener el valor Get, Delete, Options, Post, Put o Trace) de un objeto HttpServlet, o en cualquier otro método específico del protocolo definido por una clase que implementa la interfaz Servlet. El término método de servicio se utiliza para cualquier método en una clase de servlet que proporciona un servicio a un cliente.

El patrón general para un método de servicio es extraer información de la solicitud, acceder a recursos externos y luego llenar la respuesta, basándose en esa información. Para servlets HTTP, el procedimiento correcto para poblar la respuesta es el siguiente:

1. Obtener un flujo de salida de la respuesta.
2. Rellenar las cabeceras de respuesta.
3. Escribir cualquier contenido del cuerpo en el flujo de salida.

Las cabeceras de respuesta siempre deben establecerse antes de que se haya comprometido la respuesta. El contenedor web ignorará cualquier intento de establecer o agregar cabeceras después de que se haya comprometido la respuesta. Las próximas dos secciones describen cómo obtener información de las solicitudes y generar respuestas.

Una solicitud contiene datos pasados entre un cliente y el servlet. Todas las solicitudes implementan la interfaz ServletRequest. Esta interfaz define métodos para acceder a la siguiente información:

1. Parámetros, que suelen utilizarse para transmitir información entre clientes y servlets.
2. Atributos con valor de objeto, que suelen utilizarse para pasar información entre el contenedor web y un servlet o entre servlets que colaboran.
3. Información sobre el protocolo utilizado para comunicar la solicitud y sobre el cliente y el servidor involucrados en la solicitud.
4. Información relevante para la localización.

Puedes recuperar un flujo de entrada de la solicitud y analizar manualmente los datos. Para leer datos de caracteres, utiliza el objeto BufferedReader devuelto por el método getReader de la solicitud. Para leer datos binarios, utiliza ServletInputStream devuelto por getInputStream.

Las respuestas contienen datos pasados entre un servidor y el cliente. Todas las respuestas implementan la interfaz ServletResponse. Esta interfaz define métodos que te permiten hacer lo siguiente:

1. Obtener un flujo de salida para enviar datos al cliente. Para enviar datos de caracteres, utiliza PrintWriter devuelto por el método getWriter de la respuesta. Para enviar datos binarios en una respuesta de cuerpo de MIME, utiliza ServletOutputStream devuelto por getOutputStream. Para mezclar datos binarios y de texto, como en una respuesta multipart, utiliza un ServletOutputStream y administra manualmente las secciones de caracteres.

2. Indicar el tipo de contenido (por ejemplo, text/html) que se devuelve con el método setContentType(String) de la respuesta. Este método debe llamarse antes de que se comprometa la respuesta.

3. Indicar si se debe almacenar en búfer la salida con el método setBufferSize(int). De forma predeterminada, cualquier contenido escrito en el flujo de salida se envía inmediatamente al cliente. El almacenamiento en búfer permite escribir contenido antes de que se envíe algo al cliente, lo que proporciona al servlet más tiempo para establecer códigos de estado y cabeceras adecuados o reenviar a otro recurso web. El método debe llamarse antes de que se escriba cualquier contenido o antes de que se comprometa la respuesta.

4. Establecer información de localización, como la configuración regional y la codificación de caracteres.

Los objetos de respuesta HTTP, javax.servlet.http.HttpServletResponse, tienen campos que representan cabeceras HTTP, como los siguientes:

1. Códigos de estado, que se utilizan para indicar la razón por la que una solicitud no se satisface o que una solicitud ha sido redirigida.
2. Cookies, que se utilizan para almacenar información específica de la aplicación en el cliente. A veces, las cookies se utilizan para mantener un identificador para rastrear la sesión de un usuario.

> Filtrado de solicitudes y respuestas

Un filtro es un objeto que puede transformar el encabezado y el contenido (o ambos) de una solicitud o respuesta. Los filtros difieren de los componentes web en que los filtros generalmente no crean ellos mismos una respuesta. En cambio, un filtro proporciona funcionalidad que puede ser "adjuntada" a cualquier tipo de recurso web. En consecuencia, un filtro no debería tener dependencias en un recurso web para el cual esté actuando como un filtro; de esta manera, puede ser compuesto con más de un tipo de recurso web.

Las principales tareas que puede realizar un filtro son las siguientes:

1. Consultar la solicitud y actuar en consecuencia.
2. Bloquear el par de solicitud y respuesta para que no pasen más allá.
3. Modificar los encabezados y los datos de la solicitud. Esto se hace proporcionando una versión personalizada de la solicitud.
4. Modificar los encabezados y los datos de la respuesta. Esto se hace proporcionando una versión personalizada de la respuesta.
5. Interactuar con recursos externos.

Las aplicaciones de los filtros incluyen **autenticación**, registro de eventos, conversión de imágenes, compresión de datos, encriptación, tokenización de flujos, transformaciones XML, entre otros.

Puedes configurar un recurso web para que sea filtrado por una cadena de cero, uno o más filtros en un orden específico. Esta cadena se especifica cuando se despliega la aplicación web que contiene el componente y se instancia cuando un contenedor web carga el componente.

> Filtros de programación

La API de filtrado está definida por las interfaces Filter, FilterChain y FilterConfig en el paquete javax.servlet. Un filtro se define implementando la interfaz Filter.

Se utiliza la anotación @WebFilter para definir un filtro en una aplicación web. Esta anotación se especifica en una clase y contiene metadatos sobre el filtro que se está declarando. El filtro anotado debe especificar al menos un patrón de URL. Esto se hace usando el atributo urlPatterns o value en la anotación. Todos los demás atributos son opcionales, con configuraciones predeterminadas. Utiliza el atributo value cuando el único atributo en la anotación es el patrón de URL; utiliza el atributo urlPatterns cuando también se usan otros atributos.

Las clases anotadas con la anotación @WebFilter deben implementar la interfaz javax.servlet.Filter.

Para añadir datos de configuración al filtro, se especifica el atributo initParams de la anotación @WebFilter. El atributo initParams contiene una anotación @WebInitParam.

El siguiente fragmento de código define un filtro y especifica un parámetro de inicialización:

```
import javax.servlet.Filter;
import javax.servlet.annotation.WebFilter;
import javax.servlet.annotation.WebInitParam;

@WebFilter(filterName = "TimeOfDayFilter",
urlPatterns = {"/*"},
initParams = {
    @WebInitParam(name = "mood", value = "awake")})
public class TimeOfDayFilter implements Filter {
    ...
```

El método más importante en la interfaz Filter es doFilter, al que se le pasan objetos de solicitud, respuesta y cadena de filtros. Este método puede realizar las siguientes acciones:

1. Examinar los encabezados de la solicitud.
2. Personalizar el objeto de solicitud si el filtro desea modificar los encabezados o los datos de la solicitud.
3. Personalizar el objeto de respuesta si el filtro desea modificar los encabezados o los datos de la respuesta.
4. Invocar a la siguiente entidad en la cadena de filtros. Si el filtro actual es el último filtro en la cadena que termina con el componente web de destino o el recurso estático, la siguiente entidad es el recurso al final de la cadena; de lo contrario, es el siguiente filtro que se configuró en el archivo WAR. El filtro invoca la siguiente entidad llamando al método doFilter en el objeto de cadena, pasando la solicitud y respuesta con las que fue llamado o las versiones envueltas que pueda haber creado. Alternativamente, el filtro puede optar por bloquear la solicitud no haciendo la llamada para invocar la siguiente entidad. En este último caso, el filtro es responsable de completar la respuesta.
5. Examinar los encabezados de respuesta después de invocar el siguiente filtro en la cadena.
6. Lanzar una excepción para indicar un error en el procesamiento.

Además de doFilter, debes implementar los métodos init y destroy. El método init es llamado por el contenedor cuando el filtro es instanciado. Si deseas pasar parámetros de inicialización al filtro, los recuperas del objeto FilterConfig pasado a init.

> Programación de solicitudes y respuestas personalizadas

Hay muchas formas en que un filtro puede modificar una solicitud o una respuesta. Por ejemplo, un filtro puede agregar un atributo a la solicitud o puede insertar datos en la respuesta.

Un filtro que modifica una respuesta generalmente debe capturar la respuesta antes de que se devuelva al cliente. Para hacer esto, se pasa un flujo sustituto al servlet que genera la respuesta. El flujo sustituto evita que el servlet cierre el flujo de respuesta original cuando se completa y permite al filtro modificar la respuesta del servlet.

Para pasar este flujo sustituto al servlet, el filtro crea un envoltorio de respuesta que anula el método getWriter o getOutputStream para devolver este flujo sustituto. El envoltorio se pasa al método doFilter de la cadena de filtros. Los métodos de envoltura tienen por defecto llamar al objeto de solicitud o respuesta envuelto.

Para anular los métodos de solicitud, envuelve la solicitud en un objeto que extiende ServletRequestWrapper o HttpServletRequestWrapper. Para anular los métodos de respuesta, envuelve la respuesta en un objeto que extiende ServletResponseWrapper o HttpServletResponseWrapper.

> Especificación de asignaciones de filtros

Un contenedor web utiliza asignaciones de filtros para decidir cómo aplicar los filtros a los recursos web. Una asignación de filtro hace coincidir un filtro con un componente web por nombre o con recursos web por patrón de URL. Los filtros se invocan en el orden en que aparecen las asignaciones de filtro en la lista de asignaciones de filtro de un archivo WAR. Especificas una lista de asignaciones de filtro para un archivo WAR en su descriptor de despliegue utilizando NetBeans IDE o codificando la lista manualmente con XML.

Si deseas registrar cada solicitud a una aplicación web, mapeas el filtro del contador de visitas al patrón de URL /*.

Puedes mapear un filtro a uno o más recursos web, y puedes mapear más de un filtro a un recurso web. Esto se ilustra, en la que el filtro F1 está asignado a los servlets S1, S2 y S3; el filtro F2 está asignado al servlet S2; y el filtro F3 está asignado a los servlets S1 y S2.

![Descripción de la imagen](./resources/imgs/filter_to_servlet_mapping.jpg)

Recuerda que una cadena de filtros es uno de los objetos pasados al método doFilter de un filtro. Esta cadena se forma indirectamente mediante las asignaciones de filtros. El orden de los filtros en la cadena es el mismo que el orden en que aparecen las asignaciones de filtros en el descriptor de despliegue de la aplicación web.

Cuando un filtro está asignado al servlet S1, el contenedor web invoca el método doFilter de F1. El método doFilter de cada filtro en la cadena de filtros de S1 es invocado por el filtro precedente en la cadena mediante el método chain.doFilter. Debido a que la cadena de filtros de S1 contiene los filtros F1 y F3, la llamada de F1 al chain.doFilter invoca el método doFilter del filtro F3. Cuando el método doFilter de F3 se completa, el control vuelve al método doFilter de F1.

[Referencia](https://docs.oracle.com/javaee/7/tutorial/servlets.htm)
## Interface Servlet

> public interface Servlet

Define métodos que todos los servlets deben de implementar.

Un Servlet es un pequeño programa Java que se ejecuta dentro de un servidor web.

Los servlets reciben y responden a solicitudes de clientes web, generalmente a través de HTTP, el protocolo  de transferencia de hipertexto.

![Descripción de la imagen](./resources/imgs/Diagrama%20sin%20título-Java%20Servlets.drawio.svg)

> Web Server

Un servidor web es un servidor simple para servir contenido estático. No admite contenido dinámico
y solo admite contenido estático, como imágenes y archivos html.

![Descripción de la imagen](./resources/imgs/web_server.jpg)

Para implementar esta interfaz, se debe de escribir un servlet genérico que extienda 

GenericServlet o un HttpServlet

Esta interfaz define método para inicializar un servlet, atender solicitudes y eliminar un servlet del servidor.

Estos se conocen como métodos de ciclo de vida y se llaman en la siguiente secuencia:

1. El servlet se construye y luego se inicializa con el método init.
2. Se manejan todas las llamadas de los clientes al método de servicio.
3. El servlet se pone fuera de servicio, luego se destruye con el método de destrucción, después se 
recolecta la basura y se finaliza.

Además de los métodos del ciclo de vida, esta interfaz proporciona el método getServletConfig, que el servlet puede utilizar para obtener cualquier información básica de sí mismo,como el autor, la versión y derechos de autor.


> Resúmen de métodos

| Tipo y Modificador | Método | Descripción |
|--------------|--------------|--------------|
| void    | **destroy()**    | Lo llama el contenedor de servlet para indicarle a un servlet que se está poniendo fuera de servicio. |
| ServletConfig    | **getServletConfig**    | Devuelve un objeto ServletConfig, que contiene parámetros de inicialización e inicio para un servlet |
| String    | **getServletInfo**    | Devuelve información sobre el servlet, como autor, versión y derechos de autor. |
| void    | **init(ServletConfig config)**    | Lo llama el contenedor de servlet para indicarle a un servlet que el servlet se está poniendo en servicio |
| void    | **service(ServletRequest req, ServletResponse res)**    | Lo llama el contenedor de servlet para permitir que el servlet responda a una solicitud. |

> init

void init(ServletConfig config) throws ServletException

Lo llama el contenedor de servlet para indicarle a un servlet que el servlet se está poniendo en servicio.

El contenedor de servlets llama al método init exactamente una vez después de crear una instancia del servlet. El método init debe completarse exitosamente antes de que el servlet pueda recibir cualquier solicitud.

El contenedor de servlets no puede poner el servlet en servicio si el método init
1. Lanza una excepción de servlet
2. No regresa dentro de un período de tiempo definido por el servidor Web

**Parámetros**

config - un objeto ServletConfig que contiene los parámetros de configuración e inicialización del servlet

**Throws**

ServletException - si ha ocurrido una excepción que interfiere con el funcionamiento normal del servlet

> getServletConfig

ServletConfig getServletConfig()

Devuelve un objeto ServletConfig, que contiene parámetros de inicialización e inicio para este servlet. El objeto ServletConfig devuelto es el que se pasa al método init.

Las implementaciones de esta interfaz son responsables de almacenar el objeto ServletConfig para que este método pueda devolverlo. La clase GenericServlet, que implementa esta interfaz, ya lo hace.

**Returns**

el objeto ServletConfig que inicializa este servlet

> Service

void service(ServletRequest req,
             ServletResponse res)
      throws ServletException,
             IOException

Lo llama el contenedor de servlet para permitir que el servlet responda a una solicitud.

Este método sólo se llama después de que el método init() del servlet se haya completado correctamente.

El código de estado de la respuesta siempre debe configurarse para un servlet que arroja o envía un error.

Los servlets normalmente se ejecutan dentro de contenedores de servlets multiproceso que pueden manejar múltiples solicitudes al mismo tiempo.os desarrolladores deben tener en cuenta la sincronización del acceso a cualquier recurso compartido, como archivos, conexiones de red y también las variables de clase e instancia del servlet.

**Parámetros**

req: el objeto ServletRequest que contiene la solicitud del cliente 

res: el objeto ServletResponse que contiene la respuesta del servlet

**Throws**

ServletException - si ocurre una excepción que interfiere con el funcionamiento normal del servlet

IOException - si ocurre una excepción de entrada o salida

> getServletInfo

String getServletInfo()

Devuelve información sobre el servlet, como autor, versión y derechos de autor.

La cadena que devuelve este método debe ser texto sin formato y no marcado de ningún tipo (como HTML, XML, etc.).


**Returns**

una cadena que contiene información del servlet


> destroy

void destroy()

Lo llama el contenedor de servlet para indicarle a un servlet que se está poniendo fuera de servicio.
Este método solo se llama una vez que todos los subprocesos dentro del método de servicio del servlet han salido o después de que haya transcurrido un período de tiempo de espera.

Después de que el contenedor de servlet llame a este método, no volverá a llamar al método de servicio en este servlet.

Este método le da al servlet la oportunidad de limpiar cualquier recurso que esté retenido (por ejemplo, memoria, identificadores de archivos, subprocesos) y asegurarse de que cualquier estado persistente esté sincronizado con el estado actual del servlet en la memoria.

[Referencias](https://docs.oracle.com/javaee%2F7%2Fapi%2F%2F/javax/servlet/Servlet.html#destroy--)
